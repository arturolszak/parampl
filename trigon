option solver knitro;
option parampl_options 'solver=knitro';
option parampl_queue_id 'trigontest';

#determines the number of equal-size slices to which the hypercube will be split
param p;
let p := num($trigon_p);



#determines the dimension in which the space is split
param dim_p;
let dim_p := num($trigon_dim_p);


#defines how the program should be executed: 
# 	1 - sequential with solve command
# 	2 - parallel (local) with parampl
# 	3 - parallel (distributed) with parampl
param execution;
let execution := num($trigon_ex);



param n;
let n := num($trigon_n);



param xmax;
param xmin;
let xmax := num($trigon_xmax);
let xmin := -xmax;



param bsize;
let bsize := num($trigon_bsize);



param xmin1;
param xmax1;
param dx;

param bn;
param kk;

var  x{1..n};
var fi{1..n};

minimize f:
	sum{i in 1..n} fi[i]^2;

#var fi{i in 1..n}=n-(sum{j in 1..n}cos(x[j]))+i*(1-cos(x[i]))-sin(x[i]);
#minimize f: sum{i in 1..n} fi[i]^2;
	
	
subject to cons1 {i in 1..n}:
	xmin <= x[i] <= xmax;

subject to cons2:
	xmin1 <= x[dim_p] <= xmax1;

subject to cons3 {i in 1..n}:
	fi[i] = n-(sum{j in 1..n}cos(x[j]))+i*(1-cos(x[i]))-sin(x[i]);


let dx:=(xmax-xmin)/p;

if execution == 1 then {
	for{k in 1..p}{
		let {i in 1..n} x[i] := 0;
		printf "\n\n-- Subtask: %d --:\n", k;
		let xmin1:=xmin+(k-1)*dx;
		let xmax1:=xmin1+dx;
		solve;
	}
}
if execution == 2 then {
#	for{k in 1..p}{
#		let {i in 1..n} x[i] := 0;
#		printf "\n\n-- Subtask: %d --:\n", k;
#		let xmin1:=xmin+(k-1)*dx;
#		let xmax1:=xmin1+dx;
#		commands paramplsub;
#		commands paramplret;
#	}
	let bn:=1;
	repeat while (bn-1) * bsize <= p  {
		for {b in 1..bsize}{
			let kk := (bn-1) * bsize + b;
			if kk > p then break;
			let {i in 1..n} x[i] := 0;
			printf "\n\n-- Subtask: %d --:\n", kk;
			let xmin1:=xmin+(kk-1)*dx;
			let xmax1:=xmin1+dx;
			commands paramplsub;
		}
		for {b in 1..bsize}{
			let kk := (bn-1) * bsize + b;
			if kk > p then break;
			commands paramplret;
		}
		let bn := bn + 1;
	}
}
if execution == 3 then {
	let bn:=1;
	repeat while (bn-1) * bsize <= p  {
		for {b in 1..bsize}{
			let kk := (bn-1) * bsize + b;
			if kk > p then break;
			let {i in 1..n} x[i] := 0;
			printf "\n\n-- Subtask: %d --:\n", kk;
			let xmin1:=xmin+(kk-1)*dx;
			let xmax1:=xmin1+dx;
			commands paramplrsub;
		}
		for {b in 1..bsize}{
			let kk := (bn-1) * bsize + b;
			if kk > p then break;
			commands paramplrret;
		}
		let bn := bn + 1;
	}
}


